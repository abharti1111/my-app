{"version":3,"sources":["TicTacToe/TicTacToeCell.js","TicTacToe/TicTacToeGrid.js","App.js","reportWebVitals.js","index.js"],"names":["TicTacToeCell","props","changedClick","gameOver","state","clicked","setState","turn","changeCellVal","getCellContents","className","onClick","this","Component","TicTacToeGrid","gameCompleteLogic","myArr","winningConditions","i","length","a","b","c","winner","undefined","find","element","console","log","idx","slice","getGrid","gridElements","gridRowElements","j","push","getWinner","Array","fill","id","App","type","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAEqBA,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,aAAe,WACc,IAAtB,EAAKD,MAAME,WACiB,IAAxB,EAAKC,MAAMC,UACV,EAAKC,SAAS,CACVD,QAAU,EAAKJ,MAAMM,OAEzB,EAAKN,MAAMO,kBAbL,EAkBlBC,gBAAkB,WACd,OAA2B,IAAxB,EAAKL,MAAMC,QACH,qCACqB,IAAvB,EAAKD,MAAMC,QACT,qCACqB,IAAvB,EAAKD,MAAMC,QACT,0CADL,GArBN,EAAKD,MAAQ,CACTC,SAAW,GAHD,E,qDA+Bd,OACI,qBAAKK,UAAU,MAAMC,QAASC,KAAKV,aAAnC,SAAkDU,KAAKH,wB,GAjCxBI,aCCtBC,G,wDACjB,WAAYb,GAAO,IAAD,8BACd,cAAMA,IAWVc,kBAAoB,SAACC,GAWjB,IAVA,IAAIC,EAAoB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEHC,EAAE,EAAEA,EAAED,EAAkBE,OAAOD,IAAI,CAAC,IAAD,cACvBD,EAAkBC,GADK,GAChCE,EADgC,KAC9BC,EAD8B,KAC5BC,EAD4B,KAGvC,GAAe,OAAZN,EAAMI,IAAcJ,EAAMK,KAAOL,EAAMI,IAAMJ,EAAMM,KAAON,EAAMI,GAM/D,YALA,EAAKd,SAAS,CACVH,SAAW,EACXoB,OAAS,EAAKnB,MAAMG,YAIyBiB,IAA5CR,EAAMS,MAAK,SAAAC,GAAO,OAAgB,OAAZA,OAC3BC,QAAQC,IAAIX,EAAkBC,IAC9B,EAAKZ,SAAS,CACVH,SAAS,OApCP,EA2ClBK,cAAgB,SAACqB,GACb,IAAIb,EAAQ,EAAKZ,MAAMY,MAAMc,QAEJ,IAAtB,EAAK1B,MAAMD,WACVa,EAAMa,GAAO,EAAKzB,MAAMG,KAAK,IAAI,IAEjC,EAAKD,SAAS,CACVU,MAAQA,EACRT,KAAO,EAAI,EAAKH,MAAMG,OAE1B,EAAKQ,kBAAkBC,KArDb,EA8DlBe,QAAU,WAEN,IADA,IAAIC,EAAe,GADP,WAEJd,GAEJ,IADA,IAAIe,EAAkB,GAHd,WAIAC,GACJD,EAAgBE,KACZ,cAAC,EAAD,CACA5B,KAAM,EAAKH,MAAMG,KACjBC,cAAe,kBAAM,EAAKA,cAAc,EAAE0B,EAAIhB,IAC9Cf,SAAU,EAAKC,MAAMD,aALrB+B,EAAI,EAAEA,EAAE,EAAGA,IAAK,EAAhBA,GASRF,EAAaG,KACT,qBAAKzB,UAAU,MAAf,mBACSuB,OAbTf,EAAG,EAAGA,EAAE,EAAGA,IAAK,EAAhBA,GAiBR,MAAM,GAAN,OAAWc,IAjFG,EAoFlBI,UAAY,WACR,OAA2B,IAAxB,EAAKhC,MAAMD,SACH,IACsB,IAAxB,EAAKC,MAAMD,UAAwC,OAAtB,EAAKC,MAAMmB,OACtC,aACsB,IAAxB,EAAKnB,MAAMD,UAAwC,OAAtB,EAAKC,MAAMmB,OAClB,IAApB,EAAKnB,MAAMmB,OAAW,gBAAgB,qBAD3C,GAvFN,EAAKnB,MAAQ,CACTG,KAAO,EACPgB,OAAS,KACTpB,SAAW,EACXa,MAAQqB,MAAM,GAAGC,KAAK,OANZ,E,qDAgGd,OACI,gCACI,qBAAIC,GAAG,SAAP,cAAkB3B,KAAKwB,YAAvB,OACA,qBAAK1B,UAAU,OAAO6B,GAAG,OAAzB,SACK3B,KAAKmB,mB,GArGiBlB,cCgB5B2B,MAhBf,WAIE,OACE,sBAAK9B,UAAU,MAAf,UACE,2DAEA,cAAC,EAAD,IACA,qBAAKA,UAAU,MAAf,SACE,wBAAQ+B,KAAK,QAAQ9B,QATX,WACd+B,OAAOC,SAASC,UAQZ,yBCDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.6abbdc86.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nexport default class TicTacToeCell extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            clicked : -1,\n        }\n    }\n\n    changedClick = () => {\n        if(this.props.gameOver===0){\n            if(this.state.clicked === -1){\n                this.setState({\n                    clicked : this.props.turn,\n                })\n                this.props.changeCellVal();\n            }\n        }\n    }\n    \n    getCellContents = () => {\n        if(this.state.clicked === -1) {\n            return <span> </span>\n        }else if(this.state.clicked === 0){\n            return <span>X</span>\n        }else if(this.state.clicked === 1) {\n            return <span>O</span>\n        }\n    }\n\n    \n\n    render(){\n        return(\n            <div className=\"col\" onClick={this.changedClick}>{this.getCellContents()}</div>\n        )\n    }\n}","import { Component } from \"react\";\nimport TicTacToeCell from \"./TicTacToeCell\";\nimport  \"./style.css\";\nexport default class TicTacToeGrid extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            turn : 0,\n            winner : null,\n            gameOver : 0,\n            myArr : Array(9).fill(null),\n\n        }\n    }\n\n\n    gameCompleteLogic = (myArr) => {\n        let winningConditions = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n        for(let i=0;i<winningConditions.length;i++){\n            const [a,b,c] = winningConditions[i]\n            \n            if(myArr[a]!== null && myArr[b] === myArr[a] && myArr[c] === myArr[a]){\n                this.setState({\n                    gameOver : 1,\n                    winner : this.state.turn,\n                })\n                \n                return \n            }else if(myArr.find(element => element === null) === undefined){\n                console.log(winningConditions[i]);\n                this.setState({\n                    gameOver:1\n                })\n            }\n        }\n        return \n    }\n\n    changeCellVal = (idx) => {\n        let myArr = this.state.myArr.slice()\n        \n        if(this.state.gameOver===0){\n            myArr[idx] = this.state.turn?\"O\":\"X\"\n            // console.log(myArr);\n            this.setState({\n                myArr : myArr,\n                turn : 1 - this.state.turn,\n            })\n            this.gameCompleteLogic(myArr)\n        }\n        return\n    }\n    // printStates = () => {\n    //     console.log(this.state)\n    // }\n    \n\n    getGrid = () => {\n        let gridElements = []\n        for(let i =0; i<3; i++){\n            let gridRowElements = []\n            for(let j = 0;j<3; j++){\n                gridRowElements.push(\n                    <TicTacToeCell \n                    turn={this.state.turn} \n                    changeCellVal={() => this.changeCellVal(3*j + i)}\n                    gameOver={this.state.gameOver}\n                    />\n                )\n            }\n            gridElements.push(\n                <div className=\"row\" >\n                    {[...gridRowElements]}\n                </div>\n            )\n        }\n        return [...gridElements]\n    }\n\n    getWinner = () => {\n        if(this.state.gameOver === 0) {\n            return \" \"\n        }else if(this.state.gameOver === 1 && this.state.winner === null){\n            return \"It's a Tie\"\n        }else if(this.state.gameOver === 1 && this.state.winner !== null){\n            return this.state.winner===0?\"Player 1 wins\":\"Player 2 wins\"\n        }\n\n    }\n\n    render(){\n        return(\n            <div>\n                <h1 id=\"result\"> {this.getWinner()} </h1>\n                <div className=\"mycl\" id=\"grid\">\n                    {this.getGrid()}\n                </div>\n                {/* <button onClick={this.printStates}>test</button> */}\n            </div>\n            \n        )\n    }\n}","import './App.css';\nimport TicTacToeGrid from './TicTacToe/TicTacToeGrid'\n\nfunction App() {\n  const refresh = () => {\n    window.location.reload()\n  }\n  return (\n    <div className=\"App\">\n      <h1>Welcome to TicTacToe Game</h1>\n      \n      <TicTacToeGrid/>\n      <div className=\"btn\">\n        <button type=\"reset\" onClick={refresh}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}